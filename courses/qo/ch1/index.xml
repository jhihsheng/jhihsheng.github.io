<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Field Quantization | Quantum Nano-Optics</title>
    <link>https://jhihsheng.github.io/courses/qo/ch1/</link>
      <atom:link href="https://jhihsheng.github.io/courses/qo/ch1/index.xml" rel="self" type="application/rss+xml" />
    <description>Field Quantization</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh-Hant</language><copyright>Â© 2022 Jhih-Sheng Wu</copyright><lastBuildDate>Wed, 23 Feb 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://jhihsheng.github.io/media/icon_hu1386fbeed7d8c69c6cc5197e05785de8_303108_512x512_fill_lanczos_center_3.png</url>
      <title>Field Quantization</title>
      <link>https://jhihsheng.github.io/courses/qo/ch1/</link>
    </image>
    
    <item>
      <title>Harmonic Ocsillator</title>
      <link>https://jhihsheng.github.io/courses/qo/ch1/harmonic_oscillator/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://jhihsheng.github.io/courses/qo/ch1/harmonic_oscillator/</guid>
      <description>&lt;p&gt;We show how to compute the harmonic oscillator in the number basis. We use the quantum toolbox in Python,
qutip.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from qutip import *
from qutip.distributions import *
import numpy as np
import matplotlib.pyplot as plt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We begin with the number basis. &amp;lsquo;a = destroy()&amp;rsquo; genrerates the annillation operator in the numner basis.
$$ a = \begin{pmatrix} 0 &amp;amp; 0 &amp;amp; 0&amp;amp;\dots\\&lt;br&gt;
1 &amp;amp; 0 &amp;amp;  0&amp;amp;\dots\\&lt;br&gt;
0 &amp;amp;\sqrt{2}&amp;amp;0&amp;amp;\dots\\&lt;br&gt;
0 &amp;amp; 0 &amp;amp;\sqrt{3} &amp;amp;\ddots
\end{pmatrix}  $$
Then, we write $x$ and $p$ operators in the number basis,
$$ x = \frac{a+a^{\dagger}}{2}, \&lt;br&gt;
p  = \frac{a-a^{\dagger}}{2i},$$
and compute the eigenbasis of $x$ operator, that is, to express $|x_i\rangle$ in the number basis.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;## create the operators in the number basis (Fock basis)
N = 501 # the maximum number of the photon number
a = destroy(N)
x = (a + a.dag())/2
p = (a - a.dag())/2j

# to find the basis vectors of x operator (but expressed in the number basis) 
x_vals, x_states = x.eigenstates()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;discussion-here-is-more-advanced-you-can-skip-this-part&#34;&gt;Discussion here is more advanced. You can skip this part.&lt;/h3&gt;
&lt;p&gt;The problem here is related to the gauge fixing of the phase. Since the phases of the eigenstates can be arbitrary, there exist  the degree of freedom to add the phase
$$ |x_\mathrm{new} \rangle = \exp{i\phi(x)}|x \rangle,$$
where $\phi(x)$ is an arbitrary funciton. When we obtain $|x\rangle $ numerically, it may occur that
$\phi(x)$ is not a continuous funciton of $x$. The discontinuity will cause problems, says when
computing the derivatives of wavefunctions with respect to $x$. Below, we remedy the issue.&lt;/p&gt;
&lt;p&gt;The basis vectors $|x_i\rangle$  by &amp;lsquo;x_states&amp;rsquo; are obtained by the exact diagonalization of the $x$ matrix.
A typical problem of numerically obtained $|x_i\rangle$ is that the phase of different $|x_i\rangle$ is not continuous in $x$. This leads to the problem of discontinuities  of $\psi(x)$. To fix this problem,
we require the following condition
$$\mathrm{Arg}[\langle x_{i+1}|p|x_i\rangle]= \frac{\pi}{2}. $$&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#  The x_states contains the eigenvectors. However, the phase of each eigenvector is not continuous 
#  as a function of xi.
#  This casuses a problem that the wavefunciton psi(x) is not continuous.
# # The way to remedy the issue is to make &amp;lt;xi+1|p|xi&amp;gt; have the same phase   
x_states[0] = - x_states[0] # to fix the phase such that psi_0(x) &amp;gt;0
for i in range(N-1):
    tmp1 = x_states[i+1].dag()*p*x_states[i]
    ph = np.angle(tmp1)
    ph_c = np.pi/2 - ph[0,0]
    x_states[i+1] = np.exp(1j* ph_c)* x_states[i+1]
    
    
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;## plot the harmonic potential V = 1/2 x^2

plt.figure(dpi=150,figsize=(12,5))
# subplot 1
plt.subplot(1,2,1)
plt.plot(x_vals, x_vals**2/2)
plt.fill_between(x_vals, 0., x_vals**2/2, alpha=0.2)
## plot the probabilities of the eigenstates
for i in range(5):
    psi = fock(N,i) ## fock states are the eigenstates of a harmonic oscillator
    Ei = 1/2 + i 
    psi_x = psi.transform(x_states)
    y1 = np.abs(psi_x.full())**2 * 15 + Ei
    y1 = np.real(psi_x.full()) * 2 + Ei
    y1 = np.reshape(y1,(N,))
    plt.plot(x_vals, y1)
    plt.fill_between(x_vals, Ei, y1 , alpha=0.2)       
plt.ylabel(r&amp;quot;$\frac{E_n}{\hbar\omega}$&amp;quot;)
plt.xlabel(r&amp;quot;$x$&amp;quot;)
plt.xlim([-3,3])
plt.ylim([0,5.5])
plt.text(0.7,1, &#39;$\psi_0(x)$&#39;)
plt.text(1.2,2, &#39;$\psi_1(x)$&#39;)
plt.text(1.6,3, &#39;$\psi_2(x)$&#39;)
plt.text(2,4, &#39;$\psi_3(x)$&#39;)
plt.text(2.2,5, &#39;$\psi_4(x)$&#39;);

# subplot 2
plt.subplot(1,2,2)
plt.plot(x_vals, x_vals**2/2)
plt.fill_between(x_vals, 0., x_vals**2/2, alpha=0.2)
## plot the probabilities of the eigenstates
for i in range(5):
    psi = fock(N,i) ## fock states are the eigenstates of a harmonic oscillator
    Ei = 1/2 + i 
    psi_x = psi.transform(x_states)
    y1 = np.abs(psi_x.full())**2 * 15 + Ei
    y1 = np.reshape(y1,(N,))
    plt.plot(x_vals, y1)
    plt.fill_between(x_vals, Ei, y1 , alpha=0.2)       
plt.ylabel(r&amp;quot;$\frac{E_n}{\hbar\omega}$&amp;quot;)
plt.xlabel(r&amp;quot;$x$&amp;quot;)
plt.xlim([-3,3])
plt.ylim([0,5.5])
plt.text(0.7,1, &#39;$|\psi_0(x)|^2$&#39;)
plt.text(1.2,2, &#39;$|\psi_1(x)|^2$&#39;)
plt.text(1.6,3, &#39;$|\psi_2(x)|^2$&#39;)
plt.text(2,4, &#39;$|\psi_3(x)|^2$&#39;)
plt.text(2.2,5, &#39;$|\psi_4(x)|^2$&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jhihsheng.github.io/QO_2022/ho_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from qutip.ipynbtools import version_table
version_table()
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;&lt;tr&gt;&lt;th&gt;Software&lt;/th&gt;&lt;th&gt;Version&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;QuTiP&lt;/td&gt;&lt;td&gt;4.6.3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Numpy&lt;/td&gt;&lt;td&gt;1.22.2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SciPy&lt;/td&gt;&lt;td&gt;1.8.0&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;matplotlib&lt;/td&gt;&lt;td&gt;3.4.0&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Cython&lt;/td&gt;&lt;td&gt;0.29.28&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Number of CPUs&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BLAS Info&lt;/td&gt;&lt;td&gt;OPENBLAS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;IPython&lt;/td&gt;&lt;td&gt;8.1.1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Python&lt;/td&gt;&lt;td&gt;3.10.2 | packaged by conda-forge | (main, Feb  1 2022, 19:29:00) [GCC 9.4.0]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OS&lt;/td&gt;&lt;td&gt;posix [linux]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&#39;2&#39;&gt;Sun Mar 06 16:06:18 2022 CST&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Instead of using the Fock states (number states), we compute the eigenstates dierectly from the hamiltonians.
Of course, we will obtain the same results.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;hamil =  x**2 + p**2
en_vals, h_states = hamil.eigenstates()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.figure(dpi=150)
plt.plot(x_vals, x_vals**2/2)
plt.fill_between(x_vals, 0., x_vals**2/2, alpha=0.2)

## plot the probabilities of the eigenstates

for i in range(5):
    Ei = 1/2 + i 
    psi_x = h_states[i].transform(x_states)
    y1 = np.abs(psi_x.full())**2 * 15 + Ei
    y1 = np.reshape(y1,(N,))
    plt.plot(x_vals, y1)
    plt.fill_between(x_vals, Ei, y1 , alpha=0.2)

plt.ylabel(r&amp;quot;$\frac{E_n}{\hbar\omega}$&amp;quot;)
plt.xlabel(r&amp;quot;$x$&amp;quot;)
plt.xlim([-3,3])
plt.ylim([0,6])
plt.text(0.7,1, &#39;$|\psi_0(x)|^2$&#39;)
plt.text(1.2,2, &#39;$|\psi_1(x)|^2$&#39;)
plt.text(1.6,3, &#39;$|\psi_2(x)|^2$&#39;)
plt.text(2,4, &#39;$|\psi_3(x)|^2$&#39;)
plt.text(2.2,5, &#39;$|\psi_4(x)|^2$&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jhihsheng.github.io/QO_2022/ho_2.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Phase States</title>
      <link>https://jhihsheng.github.io/courses/qo/ch1/plot_phase_states/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://jhihsheng.github.io/courses/qo/ch1/plot_phase_states/</guid>
      <description>&lt;p&gt;The plot of the phase states.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib
import matplotlib.pyplot as plt
import numpy as np
# Data for plotting
phi1 = 0.5 * np.pi
phi2 = 0.7 * np.pi
Nmax = 30
phi = np.arange(0.0, 2.0 * np.pi, 0.01)
# define the phase distribution function 
def phase_dist_func(x,y):
    return np.sin(Nmax*(x-y)/2)**2./np.sin((x-y)/2)**2/Nmax/(2*np.pi)
phase_dist_1 = phase_dist_func(phi,phi1)
phase_dist_2 = phase_dist_func(phi,phi2)
## plot
fig, ax = plt.subplots()
ax.plot(phi, phase_dist_1,label=r&#39;$|\phi_1=0.5\pi\rangle$&#39;) 
## r: raw string
ax.plot(phi, phase_dist_2,label=r&#39;$|\phi_2=0.7\pi\rangle$&#39;) 
## r: raw string
ax.set(xlabel=&#39;$\phi$ &#39;, ylabel=&#39;$\mathcal{P}(\phi)$&#39;,
       title=&#39;Phase Distribution Function of a Phase State&#39;)
ax.grid()
plt.legend()
fig.savefig(&amp;quot;phase_dist.png&amp;quot;, dpi=300,facecolor=&#39;white&#39;, transparent=False)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;png&#34; srcset=&#34;
               /media/output_0_1_hufd834839036becc158b5d453c2e0787e_29444_e76650b6f6b34e512feaed2ff4c4dfd6.png 400w,
               /media/output_0_1_hufd834839036becc158b5d453c2e0787e_29444_ebfc2250bfb66d69e2b58a72b0d83c19.png 760w,
               /media/output_0_1_hufd834839036becc158b5d453c2e0787e_29444_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://jhihsheng.github.io/media/output_0_1_hufd834839036becc158b5d453c2e0787e_29444_e76650b6f6b34e512feaed2ff4c4dfd6.png&#34;
               width=&#34;533&#34;
               height=&#34;395&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;to-test-uploading-from-desktop&#34;&gt;To test uploading from desktop&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>PDF with Wigner and Q functions</title>
      <link>https://jhihsheng.github.io/courses/qo/ch1/phase_space_density/</link>
      <pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://jhihsheng.github.io/courses/qo/ch1/phase_space_density/</guid>
      <description>&lt;h2 id=&#34;visualization-of-quantum-states&#34;&gt;Visualization of quantum states&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from qutip import *
from qutip.distributions import *
import numpy as np
import matplotlib.pyplot as plt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any photonic state or ensemble can be expressed in the fock basis. For example, a state $\psi\rangle$  is
$$|\psi \rangle =\sum_{n}c_n |n\rangle $$
and an ensemble $\rho$ is
$$ \rho =\sum_{m,n} \rho_{mn}|m\rangle\langle n| $$
where $|n\rangle$ is the number state with $n$ photons. The number $n$ ranges from $0$ to $\infty$. However, in computation, $n$ can not reach $\infty$. We set a maximum value $N_{\mathrm {max}}$.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Nmax = 25 # the maximum number of the fock state
rho_coherent = coherent_dm(Nmax, np.sqrt(4)) # create a coherent state with alpha = np.sqrrt(2)
rho_thermal = thermal_dm(Nmax, 3) # create a thermal state with &amp;lt;N&amp;gt; = 3
rho_fock = fock_dm(Nmax, 3) # create a fock state with n = 3
alpha = 3 
cat_state = coherent(Nmax,alpha) + coherent(Nmax,-alpha)
rho_cat = cat_state * cat_state.dag()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;photon-number-counting&#34;&gt;photon number counting&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, axes = plt.subplots(1, 4, figsize=(15,3))
# plot the coherent state
bar0 = axes[0].bar(np.arange(0, Nmax), rho_coherent.diag())
lbl0 = axes[0].set_title(&amp;quot;Coherent State&amp;quot;)
lim0 = axes[0].set_xlim([-.5, Nmax])
# plot the thermal state
bar0 = axes[1].bar(np.arange(0, Nmax), rho_thermal.diag())
lbl0 = axes[1].set_title(&amp;quot;Thermal State&amp;quot;)
lim0 = axes[1].set_xlim([-.5, Nmax])
# plot the fock state
bar0 = axes[2].bar(np.arange(0, Nmax), rho_fock.diag())
lbl0 = axes[2].set_title(&amp;quot;Fock State&amp;quot;)
lim0 = axes[2].set_xlim([-.5, Nmax])
# plot the cat state
bar0 = axes[3].bar(np.arange(0, Nmax), rho_cat.diag())
lbl0 = axes[3].set_title(&amp;quot;Cat State&amp;quot;)
lim0 = axes[3].set_xlim([-.5, Nmax])
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;png&#34; srcset=&#34;
               /media/output_5_0_hu46dc33074bab283cd78fa13484c18d4c_10115_27e543fea8c0cbbe352a5a68bfd40f26.png 400w,
               /media/output_5_0_hu46dc33074bab283cd78fa13484c18d4c_10115_effc05c746e9c77c7b5ee4a995c4af47.png 760w,
               /media/output_5_0_hu46dc33074bab283cd78fa13484c18d4c_10115_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://jhihsheng.github.io/media/output_5_0_hu46dc33074bab283cd78fa13484c18d4c_10115_27e543fea8c0cbbe352a5a68bfd40f26.png&#34;
               width=&#34;760&#34;
               height=&#34;180&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;wigner-function&#34;&gt;Wigner function&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;xvec = np.linspace(-5,5,200)
W_coherent = wigner(rho_coherent, xvec, xvec, g = 2) # g: scaling factor https://qutip.org/docs/latest/apidoc/functions.html#qutip.states.coherent
W_thermal = wigner(rho_thermal, xvec, xvec, g = 2)
W_fock = wigner(rho_fock, xvec, xvec, g = 2 )
W_cat = wigner(cat_state , xvec, xvec, g = 2)

# plot the results


fig, axes = plt.subplots(2, 2, figsize=(10,8), dpi=200)
cont0 = axes[0,0].contourf(xvec, xvec, W_coherent, 100,cmap=&#39;RdBu&#39;,vmin=-0.6, vmax=0.6)
lbl0 = axes[0,0].set_title(&amp;quot;Coherent state&amp;quot;)
plt.colorbar(cont0,ax=axes[0,0])
axes[0, 0].axis(&#39;equal&#39;)
#axes[0, 0].set(xlim=(-5, 5), ylim=(-5, 5))
cont1 = axes[0,1].contourf(xvec, xvec, W_thermal, 100,cmap=&#39;RdBu&#39;,vmin=-0.1, vmax=0.1)
lbl1 = axes[0,1].set_title(&amp;quot;Thermal state&amp;quot;)
plt.colorbar(cont1,ax=axes[0,1])
axes[0, 1].axis(&#39;equal&#39;)
cont2 = axes[1,0].contourf(xvec, xvec, W_fock, 100,cmap=&#39;RdBu&#39;,vmin=-0.6, vmax=0.6)
lbl2 = axes[1,0].set_title(&amp;quot;Fock state&amp;quot;)
plt.colorbar(cont2,ax=axes[1,0])
axes[1, 0].axis(&#39;equal&#39;)
cont3 = axes[1,1].contourf(xvec, xvec, W_cat, 100,cmap=&#39;RdBu&#39;,vmin=-0.6, vmax=0.6)
lbl3 = axes[1,1].set_title(&amp;quot;Cat state&amp;quot;)
plt.colorbar(cont3,ax=axes[1,1])
axes[1, 1].axis(&#39;equal&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;png&#34; srcset=&#34;
               /media/output_7_0_hub2bf96781ececf7a6c10541e795be702_190596_63414ddd03fd0af1c44d3010b357eae9.png 400w,
               /media/output_7_0_hub2bf96781ececf7a6c10541e795be702_190596_3029823f242d29071d16cd20f753483c.png 760w,
               /media/output_7_0_hub2bf96781ececf7a6c10541e795be702_190596_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://jhihsheng.github.io/media/output_7_0_hub2bf96781ececf7a6c10541e795be702_190596_63414ddd03fd0af1c44d3010b357eae9.png&#34;
               width=&#34;760&#34;
               height=&#34;607&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;husimi-q-function&#34;&gt;Husimi Q-function&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;xvec = np.linspace(-5,5,200)
Q_coherent = qfunc(rho_coherent, xvec, xvec, g = 2)
Q_thermal = qfunc(rho_thermal, xvec, xvec,g = 2)
Q_fock = qfunc(rho_fock, xvec, xvec, g = 2)
Q_cat = qfunc(cat_state , xvec, xvec, g = 2)

# plot the results

fig, axes = plt.subplots(2, 2, figsize=(10,8),dpi=200)
cont0 = axes[0,0].contourf(xvec, xvec, Q_coherent, 100,cmap=&#39;RdBu&#39;,vmin=-0.3, vmax=0.3)
lbl0 = axes[0,0].set_title(&amp;quot;Coherent state&amp;quot;)
plt.colorbar(cont0,ax=axes[0,0])
axes[0, 0].axis(&#39;equal&#39;)
axes[0, 0].set(xlim=(-5, 5), ylim=(-5, 5))
cont1 = axes[0,1].contourf(xvec, xvec, Q_thermal, 100,cmap=&#39;RdBu&#39;,vmin=-0.08, vmax=0.08)
lbl1 = axes[0,1].set_title(&amp;quot;Thermal state&amp;quot;)
plt.colorbar(cont1,ax=axes[0,1])
axes[0, 1].axis(&#39;equal&#39;)
cont2 = axes[1,0].contourf(xvec, xvec, Q_fock, 100,cmap=&#39;RdBu&#39;,vmin=-0.08, vmax=0.08)
lbl2 = axes[1,0].set_title(&amp;quot;Fock state&amp;quot;)
plt.colorbar(cont2,ax=axes[1,0])
axes[1, 0].axis(&#39;equal&#39;)
cont3 = axes[1,1].contourf(xvec, xvec, Q_cat, 100,cmap=&#39;RdBu&#39;,vmin=-0.3, vmax=0.3)
lbl3 = axes[1,1].set_title(&amp;quot;Cat state&amp;quot;)
plt.colorbar(cont3,ax=axes[1,1])
axes[1, 1].axis(&#39;equal&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;png&#34; srcset=&#34;
               /media/output_9_0_hu26e4afbe0740f6cb7e68672adc57d6bb_215955_3186f682a9acaec39f651f1d1ce4c7fd.png 400w,
               /media/output_9_0_hu26e4afbe0740f6cb7e68672adc57d6bb_215955_d59d053e5674281e1e349a9ca11d60ae.png 760w,
               /media/output_9_0_hu26e4afbe0740f6cb7e68672adc57d6bb_215955_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://jhihsheng.github.io/media/output_9_0_hu26e4afbe0740f6cb7e68672adc57d6bb_215955_3186f682a9acaec39f651f1d1ce4c7fd.png&#34;
               width=&#34;760&#34;
               height=&#34;602&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
